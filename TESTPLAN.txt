We used a variety of testing methods. Most code was tested as it was written. Upon finishing a 
class, unit testing was done through writing a JUnit test file for that class. Manual testing was
heavily employed as well, especially in the text-based user interface, for which all possible 
scenarios were played out as best as possible.

Once each component was verified to be fairly stable on a stand-alone basis, integration testing 
was used to ensure that the system could work as a whole.


ClassDBTest.java -- tests adding and deleting classrooms, threads, and comments from ClassDB objects. Classes used
were ClassDB.java, ClassRoom.java, and Post.java.

ClassListTest.java -- tests adding and removing ClassData objects from ClassList objects.

Client.java -- 

ClientSocketHandler.java -- 

Cookie.java --  

Hub.java --  tests for creating a Hub correctly. Most tests were integration testing with a client and server.

HubSocketHandler.java -- Most tests were integration tests with a client, hub, and server.

Message.java -- tests for creating Cookies and setting fields of the message.

Server.java -- tests for creating a Server correctly. Most tests were integration testing with a client and hub.

ServerListTest.java -- Tests added and deleting servers from ServerList objects. 

ServerSocketHandler.java -- Most tests were integration tests with a client, hub, and server.

UserInterface.java -- The bulk of the testing for the user interface is outlined extensively in 
UserInterfaceTest.txt. UserInterfaceTest.java contains JUnit tests methods for the helper functions.

UserListTest.java -- Tests added deleting and validating users from UserList objects.